<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:macro name="carob" params="config_file">

    <xacro:property name="conf_file" value="${config_file}"/>
    <xacro:property name="config"    value="${xacro.load_yaml(conf_file)}"/>

    <xacro:property name="wheel_spacing"       value="${config['wheel_spacing']}"/>
    <xacro:property name="wheel_radius"        value="${config['wheel_radius']}"/>
    <xacro:property name="wheelbase_to_centre" value="${config['wheelbase_to_centre']}"/>

    <xacro:macro name="null_inertial">
      <inertial>
        <mass value="0.001"/>
        <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
      </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="mass radius">
      <inertial>
        <mass value="${mass}"/>
        <inertia ixx="${(2.0/5.0) * mass * radius * radius}" ixy="0.0" ixz="0.0"
                 iyy="${(2.0/5.0) * mass * radius * radius}" iyz="0.0"
                 izz="${(2.0/5.0) * mass * radius * radius}"/>
      </inertial>
    </xacro:macro>

    <xacro:macro name="solid_cuboid_inertial" params="mass len_x len_y len_z *origin">
      <inertial>
	      <mass value="${mass}"/>
	      <inertia ixx="${(1.0/12.0) * mass * (len_y * len_y + len_z * len_z)}" ixy="0.0" ixz="0.0"
                 iyy="${(1.0/12.0) * mass * (len_x * len_x + len_z * len_z)}" iyz="0.0"
                 izz="${(1.0/12.0) * mass * (len_x * len_x + len_y * len_y)}" />
        <xacro:insert_block name="origin"/>
      </inertial>
    </xacro:macro>

    <xacro:macro name="wheel_inertial" params="mass radius length">
      <inertial>
        <mass value="${mass}"/>
        <inertia ixx="${(1.0/12.0) * mass * (3.0 * radius * radius + length * length)}" ixy="0.0" ixz="0.0"
                 iyy="${(1.0/2.0) * mass * radius * radius}"                            iyz="0.0"
                 izz="${(1.0/12.0) * mass * (3.0 * radius * radius + length * length)}"/>
      </inertial>
    </xacro:macro>

    <!-- RVIZ MATERIAL COLOUR -->
    <material name="silver">
      <color rgba="0.1 0.1 0.1 0.5" />
    </material>

    <material name="darkgrey">
      <color rgba="0 0 0 0.7" />
    </material>

    <material name="blue">
      <color rgba="0 0 0.7 0.7" />
    </material>

    <material name="white">
      <color rgba="1 1 1 0.7" />
    </material>

    <!-- ROBOT DEFINITION -->
    <link name="base_link">
      <visual>
        <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0" />
        <geometry>
          <mesh filename="package://${config['mesh']['package']}/${config['mesh']['relative_path']}" scale="1.0 1.0 1.0"/>
        </geometry>
        <material name="blue"/>
      </visual>
      <collision>
        <origin rpy="0.0 0.0 0.0" xyz="${wheelbase_to_centre} 0.0 0.1" />
        <geometry>
          <box size="1.2 0.7 0.75"/>
        </geometry>
      </collision>
      <xacro:solid_cuboid_inertial mass="100.0" len_x="1.2" len_y="0.7" len_z="0.75">
        <origin rpy="0.0 0.0 0.0" xyz="${wheelbase_to_centre} 0.0 0.1"/>
      </xacro:solid_cuboid_inertial>
    </link>

    <link name='base_footprint'/>

    <joint name = "base_joint"  type = "fixed">
      <parent link="base_footprint"/>
      <child link="base_link"/>
      <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 ${wheel_radius}"/>
    </joint>

    <joint name="right_axle" type="continuous">
      <parent link="base_link" />
      <child link="right_wheel_link" />
      <origin rpy="0.0 0.0 0.0" xyz="0.0 ${-wheel_spacing/2.0} 0.0" />
      <axis xyz="0 1 0" />
    </joint>

    <link name="right_wheel_link">
      <collision>
        <origin rpy="1.5708 0.0 0.0" xyz="0.0 0.0 0.0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="0.2"/>
        </geometry>
      </collision>
      <xacro:wheel_inertial mass="50.0" radius="${wheel_radius}" length="0.42"/>
    </link>

    <joint name="aux_axle" type="fixed">
      <parent link="base_link" />
      <child link="aux_wheel_link" />
      <origin rpy="0.0 0.0 0.0" xyz="1.0 0.0 0.0" />
    </joint>

    <link name="aux_wheel_link">
      <collision>
       <geometry>
         <sphere radius="${wheel_radius}" />
       </geometry>
      </collision>
    </link>

    <joint name="left_axle" type="continuous">
      <parent link="base_link" />
      <child link="left_wheel_link" />
      <origin rpy="0.0 0.0 0.0" xyz="0.0 ${wheel_spacing/2.0} 0.0" />
      <axis xyz="0 1 0" />
    </joint>

    <link name="left_wheel_link">
      <collision>
        <origin rpy="1.5708 0.0 0.0" xyz="0.0 0.0 0.0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="0.2"/>
        </geometry>
      </collision>
      <xacro:wheel_inertial mass="50.0" radius="${wheel_radius}" length="0.42"/>
    </link>

    <gazebo>
      <plugin filename="libgazebo_ros_diff_drive.so" name="${config['name']}_gzb_diff_drive_plugin">

        <ros>
          <!-- <namespace>${config['plugins']['differential']['ns']}</namespace> -->
          <remapping>cmd_vel:=${config['plugins']['differential']['cmd_vel_topic']}</remapping>
          <remapping>odom:=${config['plugins']['differential']['odom_topic']}</remapping>
        </ros>

        <!-- Wheel info-->
        <left_joint>${config['plugins']['differential']['left_joint']}</left_joint>
        <right_joint>${config['plugins']['differential']['right_joint']}</right_joint>
        <wheel_separation>${wheel_spacing}</wheel_separation>
        <wheel_diameter>${2.0 * wheel_radius}</wheel_diameter>

        <!-- Limits-->
        <max_wheel_torque>${config['plugins']['differential']['max_wheel_torque']}</max_wheel_torque>
        <max_wheel_acceleration>${config['plugins']['differential']['max_wheel_acceleration']}</max_wheel_acceleration>

        <!-- Output-->
        <odometry_frame>${config['plugins']['differential']['odometry_frame']}</odometry_frame>
        <robot_base_frame>${config['plugins']['differential']['robot_base_frame']}</robot_base_frame>

        <publish_odom>${config['plugins']['differential']['publish_odom']}</publish_odom>
        <publish_odom_tf>${config['plugins']['differential']['publish_odom_tf']}</publish_odom_tf>
        <publish_wheel_tf>${config['plugins']['differential']['publish_wheel_tf']}</publish_wheel_tf>
      </plugin>

      <plugin filename="libgazebo_ros_joint_state_publisher.so" name="${config['name']}_gzb_joint_state_publisher_plugin">
        <ros>
          <!-- Remap the default topic -->
          <remapping>joint_states:=${config['plugins']['joint_state_publisher']['joint_state_topic']}</remapping>
        </ros>

        <!-- Update rate in Hertz -->
        <update_rate>${config['plugins']['joint_state_publisher']['update_rate']}</update_rate>

        <!-- Name of joints in the model whose states will be published. -->
        <joint_name>${config['plugins']['differential']['left_joint']}</joint_name>
        <joint_name>${config['plugins']['differential']['right_joint']}</joint_name>
      </plugin>

      <plugin filename="libgazebo_ros_p3d.so" name="${config['name']}_gzb_ros_p3d_plugin">

        <ros>
          <remapping>odom:=${config['plugins']['p3d']['base_ground_truth_topic']}</remapping>
        </ros>

        <always_on>${config['plugins']['p3d']['always_on']}</always_on>
        <update_rate>${config['plugins']['p3d']['update_rate']}</update_rate>
        <frame_name>${config['plugins']['p3d']['frame_name']}</frame_name>
        <body_name>${config['plugins']['p3d']['body_name']}</body_name>
        <rpy_offset>
          ${config['plugins']['p3d']['offsets']['R']}
          ${config['plugins']['p3d']['offsets']['P']}
          ${config['plugins']['p3d']['offsets']['Y']}
        </rpy_offset>
        <xyz_offset>
          ${config['plugins']['p3d']['offsets']['x']}
          ${config['plugins']['p3d']['offsets']['y']}
          ${config['plugins']['p3d']['offsets']['z']}
        </xyz_offset>
        <gaussian_noise>${config['plugins']['p3d']['gaussian_noise']}</gaussian_noise>
      </plugin>
      
     </gazebo>


  </xacro:macro>
</robot>